{"version":3,"sources":["components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","search","setSearch","results","setResults","progress","setProgress","ShowResults","undefined","console","table","organic_results","style","textAlign","width","marginLeft","map","item","marginBottom","color","fontWeight","title","href","url","marginTop","snippet","margin","CircularProgress","position","top","Typography","variant","component","autoComplete","TextField","id","label","type","onChange","e","target","value","Button","onClick","a","fetch","response","json","resultJson","userAction","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAMe,SAASA,IAEpB,MAA4BC,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,qBAA9B,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KA0BA,SAASC,IACL,YAAaC,IAAVL,QAAgCK,IAATP,GACtBQ,QAAQC,MAAMP,EAAQQ,iBAEpB,qBACEC,MAAO,CACLC,UAAW,OACXC,MAAO,MACPC,WAAY,SAJhB,SAOGZ,EAAQQ,gBAAgBK,KAAI,SAACC,GAC5B,OACE,sBAEEL,MAAO,CACLM,aAAc,QAHlB,UAME,oBACEN,MAAO,CACLM,aAAc,IACdC,MAAM,UACNC,WAAW,OAJf,SAOGH,EAAKI,QAER,mBAAGC,KAAML,EAAKM,IAAKX,MAAO,CAACO,MAAM,SAAjC,SAA4CF,EAAKM,MACjD,mBAAGX,MAAO,CAACO,MAAM,UAAUK,UAAU,OAArC,SAA8CP,EAAKQ,YAf9CR,EAAKI,aAsBb,KAKjB,OACE,sBACET,MAAO,CACLc,OAAQ,QAFZ,UAKGrB,EACC,cAACsB,EAAA,EAAD,CACEf,MAAO,CACLgB,SAAU,WACVC,IAAK,SAIT,GAEF,cAACC,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,KACVpB,MAAO,CACLM,aAAc,QAJlB,mCASA,uBAAMe,aAAa,MAAnB,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,SACHC,MAAM,SACNC,KAAK,SACLzB,MAAO,CACLE,MAAO,OAETwB,SAlGN,SAA0BC,GACtBrC,EAAUqC,EAAEC,OAAOC,UAmGnB,cAACC,EAAA,EAAD,CAAQX,QAAQ,YAAYZ,MAAM,UAAUwB,QAhGhD,WACI,QAAenC,IAAXP,EAAsB,CACxB,IACMsB,EACJ,8FAGAtB,GAEc,uCAAG,8BAAA2C,EAAA,6DACjBtC,GAAY,GADK,SAEMuC,MAAMtB,GAFZ,cAEXuB,EAFW,gBAGQA,EAASC,OAHjB,OAGXC,EAHW,OAIjB5C,EAAW4C,GACX1C,GAAY,GALK,2CAAH,qDAOhB2C,KAgFF,SACE,cAACnB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,yBAKJ,cAACzB,EAAD,OC3GS2C,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACpD,EAAD,OCMSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d00f387e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\n\r\nexport default function Search() {\r\n\r\n    const [search, setSearch] = useState();\r\n    const [results, setResults] = useState();\r\n    const [progress, setProgress] = useState(false);\r\n\r\n    function handleTextchange(e){\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    function googleSearch(){\r\n        if (search !== undefined) {\r\n          const api_Key = \"5391ac12f805b937eb815538808e137d\";\r\n          const url =\r\n            \"http://api.serpstack.com/search?access_key=\" +\r\n            api_Key +\r\n            \"&type=web&query=\" +\r\n            search;\r\n\r\n          const userAction = async () => {\r\n            setProgress(true);\r\n            const response = await fetch(url);\r\n            const resultJson = await response.json(); //extract JSON from the http response\r\n            setResults(resultJson);\r\n            setProgress(false);\r\n          };\r\n          userAction();\r\n        }\r\n    }\r\n\r\n    function ShowResults(){\r\n        if(results!==undefined && search!==undefined){\r\n            console.table(results.organic_results);\r\n            return (\r\n              <div\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  width: \"50%\",\r\n                  marginLeft: \"15rem\",\r\n                }}\r\n              >\r\n                {results.organic_results.map((item) => {\r\n                  return (\r\n                    <div\r\n                      key={item.title}\r\n                      style={{\r\n                        marginBottom: \"2rem\",\r\n                      }}\r\n                    >\r\n                      <h4\r\n                        style={{\r\n                          marginBottom: \"0\",\r\n                          color:'#1a0dab',\r\n                          fontWeight:'500'\r\n                        }}\r\n                      >\r\n                        {item.title}\r\n                      </h4>\r\n                      <a href={item.url} style={{color:'green'}}>{item.url}</a>\r\n                      <p style={{color:\"#4d5156\",marginTop:\"3px\"}}>{item.snippet}</p>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n        }else{\r\n            return null;\r\n        }\r\n       \r\n    }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: \"2rem\",\r\n      }}\r\n    >\r\n      {progress ? (\r\n        <CircularProgress\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n          }}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Typography\r\n        variant=\"h3\"\r\n        component=\"h3\"\r\n        style={{\r\n          marginBottom: \"3rem\",\r\n        }}\r\n      >\r\n        Google Search Results\r\n      </Typography>\r\n      <form autoComplete=\"off\">\r\n        <TextField\r\n          id=\"search\"\r\n          label=\"Search\"\r\n          type=\"search\"\r\n          style={{\r\n            width: \"50%\",\r\n          }}\r\n          onChange={handleTextchange}\r\n        ></TextField>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={googleSearch}>\r\n          <Typography variant=\"h5\" component=\"h5\">\r\n            Search\r\n          </Typography>\r\n        </Button>\r\n      </form>\r\n      <ShowResults></ShowResults>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport Search from './components/Search';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}